type Book {
  id: ID!
  title: String!
  author: String!
  status: Status!
  rating: Float
  notes: String
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

input CreateBookInput {
  title: String!
  author: String!
  status: Status
  rating: Float
  notes: String
}

input UpdateBookInput {
  id: ID!
  title: String
  author: String
  status: Status
  rating: Float
  notes: String
}

input DeleteBookInput {
  id: ID!
}

input GetBookByIdInput {
  id: ID!
}

type OffsetPageInfo {
  totalResults: Int!
  limit: Int!
  offset: Int!
  nextOffset: Int
  previousOffset: Int
}

type AllBooksConnection {
  node: [Book!]!
  offsetPageInfo: OffsetPageInfo!
}

type BookSearchResultConnection {
  node: [Book!]!
  offsetPageInfo: OffsetPageInfo!
}

enum BOOK_SEARCH_SORT_COLUMN {
  TITLE
  AUTHOR
  STATUS
  RATING
}

enum BOOK_SEARCH_SORT_ORDER {
  ASC
  DESC
}

input BooksSearchSort {
  column: BOOK_SEARCH_SORT_COLUMN!
  order: BOOK_SEARCH_SORT_ORDER!
}

input BooksSearchFilter {
  title: String
  author: String
  status: Status
  rating: Int
}

type Query {
  books(limit: Int = 10, offset: Int = 0): AllBooksConnection!
  getBookById(input: GetBookByIdInput!): Book
  bookSearch(
    limit: Int = 10
    offset: Int = 0
    sort: BooksSearchSort
    filter: BooksSearchFilter
  ): BookSearchResultConnection!
}

type Mutation {
  createBook(input: CreateBookInput!): Book
  updateBook(input: UpdateBookInput!): Book
  deleteBook(input: DeleteBookInput!): Boolean
}
